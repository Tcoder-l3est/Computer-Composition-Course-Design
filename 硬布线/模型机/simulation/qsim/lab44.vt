// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2021 20:21:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab44
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab44_vlg_sample_tst(
	CLK,
	CLKS,
	RESET,
	RST,
	sampler_tx
);
input  CLK;
input  CLKS;
input  RESET;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLKS or RESET or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab44_vlg_check_tst (
	Ain,
	Bin,
	CPIR,
	CPMAR,
	CPPC,
	DBUS,
	IROUT,
	MA,
	MM,
	PB,
	PCOUT,
	R0OUT,
	R1OUT,
	R2OUT,
	RA,
	RB,
	sampler_rx
);
input [7:0] Ain;
input [7:0] Bin;
input  CPIR;
input  CPMAR;
input  CPPC;
input [7:0] DBUS;
input [7:0] IROUT;
input  MA;
input [7:0] MM;
input  PB;
input [7:0] PCOUT;
input [7:0] R0OUT;
input [7:0] R1OUT;
input [7:0] R2OUT;
input  RA;
input  RB;
input sampler_rx;

reg [7:0] Ain_expected;
reg [7:0] Bin_expected;
reg  CPIR_expected;
reg  CPMAR_expected;
reg  CPPC_expected;
reg [7:0] DBUS_expected;
reg [7:0] IROUT_expected;
reg  MA_expected;
reg [7:0] MM_expected;
reg  PB_expected;
reg [7:0] PCOUT_expected;
reg [7:0] R0OUT_expected;
reg [7:0] R1OUT_expected;
reg [7:0] R2OUT_expected;
reg  RA_expected;
reg  RB_expected;

reg [7:0] Ain_prev;
reg [7:0] Bin_prev;
reg  CPIR_prev;
reg  CPMAR_prev;
reg  CPPC_prev;
reg [7:0] DBUS_prev;
reg [7:0] IROUT_prev;
reg  MA_prev;
reg [7:0] MM_prev;
reg  PB_prev;
reg [7:0] PCOUT_prev;
reg [7:0] R0OUT_prev;
reg [7:0] R1OUT_prev;
reg [7:0] R2OUT_prev;
reg  RA_prev;
reg  RB_prev;

reg [7:0] Ain_expected_prev;
reg [7:0] Bin_expected_prev;
reg [7:0] DBUS_expected_prev;
reg [7:0] IROUT_expected_prev;
reg [7:0] MM_expected_prev;
reg [7:0] PCOUT_expected_prev;
reg [7:0] R0OUT_expected_prev;
reg [7:0] R1OUT_expected_prev;
reg [7:0] R2OUT_expected_prev;

reg [7:0] last_Ain_exp;
reg [7:0] last_Bin_exp;
reg [7:0] last_DBUS_exp;
reg [7:0] last_IROUT_exp;
reg [7:0] last_MM_exp;
reg [7:0] last_PCOUT_exp;
reg [7:0] last_R0OUT_exp;
reg [7:0] last_R1OUT_exp;
reg [7:0] last_R2OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ain_prev = Ain;
	Bin_prev = Bin;
	CPIR_prev = CPIR;
	CPMAR_prev = CPMAR;
	CPPC_prev = CPPC;
	DBUS_prev = DBUS;
	IROUT_prev = IROUT;
	MA_prev = MA;
	MM_prev = MM;
	PB_prev = PB;
	PCOUT_prev = PCOUT;
	R0OUT_prev = R0OUT;
	R1OUT_prev = R1OUT;
	R2OUT_prev = R2OUT;
	RA_prev = RA;
	RB_prev = RB;
end

// update expected /o prevs

always @(trigger)
begin
	Ain_expected_prev = Ain_expected;
	Bin_expected_prev = Bin_expected;
	DBUS_expected_prev = DBUS_expected;
	IROUT_expected_prev = IROUT_expected;
	MM_expected_prev = MM_expected;
	PCOUT_expected_prev = PCOUT_expected;
	R0OUT_expected_prev = R0OUT_expected;
	R1OUT_expected_prev = R1OUT_expected;
	R2OUT_expected_prev = R2OUT_expected;
end


// expected Ain[ 7 ]
initial
begin
	Ain_expected[7] = 1'bX;
end 
// expected Ain[ 6 ]
initial
begin
	Ain_expected[6] = 1'bX;
end 
// expected Ain[ 5 ]
initial
begin
	Ain_expected[5] = 1'bX;
end 
// expected Ain[ 4 ]
initial
begin
	Ain_expected[4] = 1'bX;
end 
// expected Ain[ 3 ]
initial
begin
	Ain_expected[3] = 1'bX;
end 
// expected Ain[ 2 ]
initial
begin
	Ain_expected[2] = 1'bX;
end 
// expected Ain[ 1 ]
initial
begin
	Ain_expected[1] = 1'bX;
end 
// expected Ain[ 0 ]
initial
begin
	Ain_expected[0] = 1'bX;
end 
// expected Bin[ 7 ]
initial
begin
	Bin_expected[7] = 1'bX;
end 
// expected Bin[ 6 ]
initial
begin
	Bin_expected[6] = 1'bX;
end 
// expected Bin[ 5 ]
initial
begin
	Bin_expected[5] = 1'bX;
end 
// expected Bin[ 4 ]
initial
begin
	Bin_expected[4] = 1'bX;
end 
// expected Bin[ 3 ]
initial
begin
	Bin_expected[3] = 1'bX;
end 
// expected Bin[ 2 ]
initial
begin
	Bin_expected[2] = 1'bX;
end 
// expected Bin[ 1 ]
initial
begin
	Bin_expected[1] = 1'bX;
end 
// expected Bin[ 0 ]
initial
begin
	Bin_expected[0] = 1'bX;
end 
// expected DBUS[ 7 ]
initial
begin
	DBUS_expected[7] = 1'bX;
end 
// expected DBUS[ 6 ]
initial
begin
	DBUS_expected[6] = 1'bX;
end 
// expected DBUS[ 5 ]
initial
begin
	DBUS_expected[5] = 1'bX;
end 
// expected DBUS[ 4 ]
initial
begin
	DBUS_expected[4] = 1'bX;
end 
// expected DBUS[ 3 ]
initial
begin
	DBUS_expected[3] = 1'bX;
end 
// expected DBUS[ 2 ]
initial
begin
	DBUS_expected[2] = 1'bX;
end 
// expected DBUS[ 1 ]
initial
begin
	DBUS_expected[1] = 1'bX;
end 
// expected DBUS[ 0 ]
initial
begin
	DBUS_expected[0] = 1'bX;
end 
// expected IROUT[ 7 ]
initial
begin
	IROUT_expected[7] = 1'bX;
end 
// expected IROUT[ 6 ]
initial
begin
	IROUT_expected[6] = 1'bX;
end 
// expected IROUT[ 5 ]
initial
begin
	IROUT_expected[5] = 1'bX;
end 
// expected IROUT[ 4 ]
initial
begin
	IROUT_expected[4] = 1'bX;
end 
// expected IROUT[ 3 ]
initial
begin
	IROUT_expected[3] = 1'bX;
end 
// expected IROUT[ 2 ]
initial
begin
	IROUT_expected[2] = 1'bX;
end 
// expected IROUT[ 1 ]
initial
begin
	IROUT_expected[1] = 1'bX;
end 
// expected IROUT[ 0 ]
initial
begin
	IROUT_expected[0] = 1'bX;
end 
// expected MM[ 7 ]
initial
begin
	MM_expected[7] = 1'bX;
end 
// expected MM[ 6 ]
initial
begin
	MM_expected[6] = 1'bX;
end 
// expected MM[ 5 ]
initial
begin
	MM_expected[5] = 1'bX;
end 
// expected MM[ 4 ]
initial
begin
	MM_expected[4] = 1'bX;
end 
// expected MM[ 3 ]
initial
begin
	MM_expected[3] = 1'bX;
end 
// expected MM[ 2 ]
initial
begin
	MM_expected[2] = 1'bX;
end 
// expected MM[ 1 ]
initial
begin
	MM_expected[1] = 1'bX;
end 
// expected MM[ 0 ]
initial
begin
	MM_expected[0] = 1'bX;
end 
// expected PCOUT[ 7 ]
initial
begin
	PCOUT_expected[7] = 1'bX;
end 
// expected PCOUT[ 6 ]
initial
begin
	PCOUT_expected[6] = 1'bX;
end 
// expected PCOUT[ 5 ]
initial
begin
	PCOUT_expected[5] = 1'bX;
end 
// expected PCOUT[ 4 ]
initial
begin
	PCOUT_expected[4] = 1'bX;
end 
// expected PCOUT[ 3 ]
initial
begin
	PCOUT_expected[3] = 1'bX;
end 
// expected PCOUT[ 2 ]
initial
begin
	PCOUT_expected[2] = 1'bX;
end 
// expected PCOUT[ 1 ]
initial
begin
	PCOUT_expected[1] = 1'bX;
end 
// expected PCOUT[ 0 ]
initial
begin
	PCOUT_expected[0] = 1'bX;
end 
// expected R0OUT[ 7 ]
initial
begin
	R0OUT_expected[7] = 1'bX;
end 
// expected R0OUT[ 6 ]
initial
begin
	R0OUT_expected[6] = 1'bX;
end 
// expected R0OUT[ 5 ]
initial
begin
	R0OUT_expected[5] = 1'bX;
end 
// expected R0OUT[ 4 ]
initial
begin
	R0OUT_expected[4] = 1'bX;
end 
// expected R0OUT[ 3 ]
initial
begin
	R0OUT_expected[3] = 1'bX;
end 
// expected R0OUT[ 2 ]
initial
begin
	R0OUT_expected[2] = 1'bX;
end 
// expected R0OUT[ 1 ]
initial
begin
	R0OUT_expected[1] = 1'bX;
end 
// expected R0OUT[ 0 ]
initial
begin
	R0OUT_expected[0] = 1'bX;
end 
// expected R1OUT[ 7 ]
initial
begin
	R1OUT_expected[7] = 1'bX;
end 
// expected R1OUT[ 6 ]
initial
begin
	R1OUT_expected[6] = 1'bX;
end 
// expected R1OUT[ 5 ]
initial
begin
	R1OUT_expected[5] = 1'bX;
end 
// expected R1OUT[ 4 ]
initial
begin
	R1OUT_expected[4] = 1'bX;
end 
// expected R1OUT[ 3 ]
initial
begin
	R1OUT_expected[3] = 1'bX;
end 
// expected R1OUT[ 2 ]
initial
begin
	R1OUT_expected[2] = 1'bX;
end 
// expected R1OUT[ 1 ]
initial
begin
	R1OUT_expected[1] = 1'bX;
end 
// expected R1OUT[ 0 ]
initial
begin
	R1OUT_expected[0] = 1'bX;
end 
// expected R2OUT[ 7 ]
initial
begin
	R2OUT_expected[7] = 1'bX;
end 
// expected R2OUT[ 6 ]
initial
begin
	R2OUT_expected[6] = 1'bX;
end 
// expected R2OUT[ 5 ]
initial
begin
	R2OUT_expected[5] = 1'bX;
end 
// expected R2OUT[ 4 ]
initial
begin
	R2OUT_expected[4] = 1'bX;
end 
// expected R2OUT[ 3 ]
initial
begin
	R2OUT_expected[3] = 1'bX;
end 
// expected R2OUT[ 2 ]
initial
begin
	R2OUT_expected[2] = 1'bX;
end 
// expected R2OUT[ 1 ]
initial
begin
	R2OUT_expected[1] = 1'bX;
end 
// expected R2OUT[ 0 ]
initial
begin
	R2OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(Ain_expected or Ain or Bin_expected or Bin or CPIR_expected or CPIR or CPMAR_expected or CPMAR or CPPC_expected or CPPC or DBUS_expected or DBUS or IROUT_expected or IROUT or MA_expected or MA or MM_expected or MM or PB_expected or PB or PCOUT_expected or PCOUT or R0OUT_expected or R0OUT or R1OUT_expected or R1OUT or R2OUT_expected or R2OUT or RA_expected or RA or RB_expected or RB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ain = %b | expected Bin = %b | expected CPIR = %b | expected CPMAR = %b | expected CPPC = %b | expected DBUS = %b | expected IROUT = %b | expected MA = %b | expected MM = %b | expected PB = %b | expected PCOUT = %b | expected R0OUT = %b | expected R1OUT = %b | expected R2OUT = %b | expected RA = %b | expected RB = %b | ",Ain_expected_prev,Bin_expected_prev,CPIR_expected_prev,CPMAR_expected_prev,CPPC_expected_prev,DBUS_expected_prev,IROUT_expected_prev,MA_expected_prev,MM_expected_prev,PB_expected_prev,PCOUT_expected_prev,R0OUT_expected_prev,R1OUT_expected_prev,R2OUT_expected_prev,RA_expected_prev,RB_expected_prev);
	$display("| real Ain = %b | real Bin = %b | real CPIR = %b | real CPMAR = %b | real CPPC = %b | real DBUS = %b | real IROUT = %b | real MA = %b | real MM = %b | real PB = %b | real PCOUT = %b | real R0OUT = %b | real R1OUT = %b | real R2OUT = %b | real RA = %b | real RB = %b | ",Ain_prev,Bin_prev,CPIR_prev,CPMAR_prev,CPPC_prev,DBUS_prev,IROUT_prev,MA_prev,MM_prev,PB_prev,PCOUT_prev,R0OUT_prev,R1OUT_prev,R2OUT_prev,RA_prev,RB_prev);
`endif
	if (
		( Ain_expected_prev[0] !== 1'bx ) && ( Ain_prev[0] !== Ain_expected_prev[0] )
		&& ((Ain_expected_prev[0] !== last_Ain_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[0] = Ain_expected_prev[0];
	end
	if (
		( Ain_expected_prev[1] !== 1'bx ) && ( Ain_prev[1] !== Ain_expected_prev[1] )
		&& ((Ain_expected_prev[1] !== last_Ain_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[1] = Ain_expected_prev[1];
	end
	if (
		( Ain_expected_prev[2] !== 1'bx ) && ( Ain_prev[2] !== Ain_expected_prev[2] )
		&& ((Ain_expected_prev[2] !== last_Ain_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[2] = Ain_expected_prev[2];
	end
	if (
		( Ain_expected_prev[3] !== 1'bx ) && ( Ain_prev[3] !== Ain_expected_prev[3] )
		&& ((Ain_expected_prev[3] !== last_Ain_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[3] = Ain_expected_prev[3];
	end
	if (
		( Ain_expected_prev[4] !== 1'bx ) && ( Ain_prev[4] !== Ain_expected_prev[4] )
		&& ((Ain_expected_prev[4] !== last_Ain_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[4] = Ain_expected_prev[4];
	end
	if (
		( Ain_expected_prev[5] !== 1'bx ) && ( Ain_prev[5] !== Ain_expected_prev[5] )
		&& ((Ain_expected_prev[5] !== last_Ain_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[5] = Ain_expected_prev[5];
	end
	if (
		( Ain_expected_prev[6] !== 1'bx ) && ( Ain_prev[6] !== Ain_expected_prev[6] )
		&& ((Ain_expected_prev[6] !== last_Ain_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[6] = Ain_expected_prev[6];
	end
	if (
		( Ain_expected_prev[7] !== 1'bx ) && ( Ain_prev[7] !== Ain_expected_prev[7] )
		&& ((Ain_expected_prev[7] !== last_Ain_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ain[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ain_expected_prev);
		$display ("     Real value = %b", Ain_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ain_exp[7] = Ain_expected_prev[7];
	end
	if (
		( Bin_expected_prev[0] !== 1'bx ) && ( Bin_prev[0] !== Bin_expected_prev[0] )
		&& ((Bin_expected_prev[0] !== last_Bin_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[0] = Bin_expected_prev[0];
	end
	if (
		( Bin_expected_prev[1] !== 1'bx ) && ( Bin_prev[1] !== Bin_expected_prev[1] )
		&& ((Bin_expected_prev[1] !== last_Bin_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[1] = Bin_expected_prev[1];
	end
	if (
		( Bin_expected_prev[2] !== 1'bx ) && ( Bin_prev[2] !== Bin_expected_prev[2] )
		&& ((Bin_expected_prev[2] !== last_Bin_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[2] = Bin_expected_prev[2];
	end
	if (
		( Bin_expected_prev[3] !== 1'bx ) && ( Bin_prev[3] !== Bin_expected_prev[3] )
		&& ((Bin_expected_prev[3] !== last_Bin_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[3] = Bin_expected_prev[3];
	end
	if (
		( Bin_expected_prev[4] !== 1'bx ) && ( Bin_prev[4] !== Bin_expected_prev[4] )
		&& ((Bin_expected_prev[4] !== last_Bin_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[4] = Bin_expected_prev[4];
	end
	if (
		( Bin_expected_prev[5] !== 1'bx ) && ( Bin_prev[5] !== Bin_expected_prev[5] )
		&& ((Bin_expected_prev[5] !== last_Bin_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[5] = Bin_expected_prev[5];
	end
	if (
		( Bin_expected_prev[6] !== 1'bx ) && ( Bin_prev[6] !== Bin_expected_prev[6] )
		&& ((Bin_expected_prev[6] !== last_Bin_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[6] = Bin_expected_prev[6];
	end
	if (
		( Bin_expected_prev[7] !== 1'bx ) && ( Bin_prev[7] !== Bin_expected_prev[7] )
		&& ((Bin_expected_prev[7] !== last_Bin_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bin_expected_prev);
		$display ("     Real value = %b", Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bin_exp[7] = Bin_expected_prev[7];
	end
	if (
		( DBUS_expected_prev[0] !== 1'bx ) && ( DBUS_prev[0] !== DBUS_expected_prev[0] )
		&& ((DBUS_expected_prev[0] !== last_DBUS_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[0] = DBUS_expected_prev[0];
	end
	if (
		( DBUS_expected_prev[1] !== 1'bx ) && ( DBUS_prev[1] !== DBUS_expected_prev[1] )
		&& ((DBUS_expected_prev[1] !== last_DBUS_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[1] = DBUS_expected_prev[1];
	end
	if (
		( DBUS_expected_prev[2] !== 1'bx ) && ( DBUS_prev[2] !== DBUS_expected_prev[2] )
		&& ((DBUS_expected_prev[2] !== last_DBUS_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[2] = DBUS_expected_prev[2];
	end
	if (
		( DBUS_expected_prev[3] !== 1'bx ) && ( DBUS_prev[3] !== DBUS_expected_prev[3] )
		&& ((DBUS_expected_prev[3] !== last_DBUS_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[3] = DBUS_expected_prev[3];
	end
	if (
		( DBUS_expected_prev[4] !== 1'bx ) && ( DBUS_prev[4] !== DBUS_expected_prev[4] )
		&& ((DBUS_expected_prev[4] !== last_DBUS_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[4] = DBUS_expected_prev[4];
	end
	if (
		( DBUS_expected_prev[5] !== 1'bx ) && ( DBUS_prev[5] !== DBUS_expected_prev[5] )
		&& ((DBUS_expected_prev[5] !== last_DBUS_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[5] = DBUS_expected_prev[5];
	end
	if (
		( DBUS_expected_prev[6] !== 1'bx ) && ( DBUS_prev[6] !== DBUS_expected_prev[6] )
		&& ((DBUS_expected_prev[6] !== last_DBUS_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[6] = DBUS_expected_prev[6];
	end
	if (
		( DBUS_expected_prev[7] !== 1'bx ) && ( DBUS_prev[7] !== DBUS_expected_prev[7] )
		&& ((DBUS_expected_prev[7] !== last_DBUS_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBUS_expected_prev);
		$display ("     Real value = %b", DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DBUS_exp[7] = DBUS_expected_prev[7];
	end
	if (
		( IROUT_expected_prev[0] !== 1'bx ) && ( IROUT_prev[0] !== IROUT_expected_prev[0] )
		&& ((IROUT_expected_prev[0] !== last_IROUT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[0] = IROUT_expected_prev[0];
	end
	if (
		( IROUT_expected_prev[1] !== 1'bx ) && ( IROUT_prev[1] !== IROUT_expected_prev[1] )
		&& ((IROUT_expected_prev[1] !== last_IROUT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[1] = IROUT_expected_prev[1];
	end
	if (
		( IROUT_expected_prev[2] !== 1'bx ) && ( IROUT_prev[2] !== IROUT_expected_prev[2] )
		&& ((IROUT_expected_prev[2] !== last_IROUT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[2] = IROUT_expected_prev[2];
	end
	if (
		( IROUT_expected_prev[3] !== 1'bx ) && ( IROUT_prev[3] !== IROUT_expected_prev[3] )
		&& ((IROUT_expected_prev[3] !== last_IROUT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[3] = IROUT_expected_prev[3];
	end
	if (
		( IROUT_expected_prev[4] !== 1'bx ) && ( IROUT_prev[4] !== IROUT_expected_prev[4] )
		&& ((IROUT_expected_prev[4] !== last_IROUT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[4] = IROUT_expected_prev[4];
	end
	if (
		( IROUT_expected_prev[5] !== 1'bx ) && ( IROUT_prev[5] !== IROUT_expected_prev[5] )
		&& ((IROUT_expected_prev[5] !== last_IROUT_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[5] = IROUT_expected_prev[5];
	end
	if (
		( IROUT_expected_prev[6] !== 1'bx ) && ( IROUT_prev[6] !== IROUT_expected_prev[6] )
		&& ((IROUT_expected_prev[6] !== last_IROUT_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[6] = IROUT_expected_prev[6];
	end
	if (
		( IROUT_expected_prev[7] !== 1'bx ) && ( IROUT_prev[7] !== IROUT_expected_prev[7] )
		&& ((IROUT_expected_prev[7] !== last_IROUT_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IROUT_exp[7] = IROUT_expected_prev[7];
	end
	if (
		( MM_expected_prev[0] !== 1'bx ) && ( MM_prev[0] !== MM_expected_prev[0] )
		&& ((MM_expected_prev[0] !== last_MM_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[0] = MM_expected_prev[0];
	end
	if (
		( MM_expected_prev[1] !== 1'bx ) && ( MM_prev[1] !== MM_expected_prev[1] )
		&& ((MM_expected_prev[1] !== last_MM_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[1] = MM_expected_prev[1];
	end
	if (
		( MM_expected_prev[2] !== 1'bx ) && ( MM_prev[2] !== MM_expected_prev[2] )
		&& ((MM_expected_prev[2] !== last_MM_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[2] = MM_expected_prev[2];
	end
	if (
		( MM_expected_prev[3] !== 1'bx ) && ( MM_prev[3] !== MM_expected_prev[3] )
		&& ((MM_expected_prev[3] !== last_MM_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[3] = MM_expected_prev[3];
	end
	if (
		( MM_expected_prev[4] !== 1'bx ) && ( MM_prev[4] !== MM_expected_prev[4] )
		&& ((MM_expected_prev[4] !== last_MM_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[4] = MM_expected_prev[4];
	end
	if (
		( MM_expected_prev[5] !== 1'bx ) && ( MM_prev[5] !== MM_expected_prev[5] )
		&& ((MM_expected_prev[5] !== last_MM_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[5] = MM_expected_prev[5];
	end
	if (
		( MM_expected_prev[6] !== 1'bx ) && ( MM_prev[6] !== MM_expected_prev[6] )
		&& ((MM_expected_prev[6] !== last_MM_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[6] = MM_expected_prev[6];
	end
	if (
		( MM_expected_prev[7] !== 1'bx ) && ( MM_prev[7] !== MM_expected_prev[7] )
		&& ((MM_expected_prev[7] !== last_MM_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MM_expected_prev);
		$display ("     Real value = %b", MM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MM_exp[7] = MM_expected_prev[7];
	end
	if (
		( PCOUT_expected_prev[0] !== 1'bx ) && ( PCOUT_prev[0] !== PCOUT_expected_prev[0] )
		&& ((PCOUT_expected_prev[0] !== last_PCOUT_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[0] = PCOUT_expected_prev[0];
	end
	if (
		( PCOUT_expected_prev[1] !== 1'bx ) && ( PCOUT_prev[1] !== PCOUT_expected_prev[1] )
		&& ((PCOUT_expected_prev[1] !== last_PCOUT_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[1] = PCOUT_expected_prev[1];
	end
	if (
		( PCOUT_expected_prev[2] !== 1'bx ) && ( PCOUT_prev[2] !== PCOUT_expected_prev[2] )
		&& ((PCOUT_expected_prev[2] !== last_PCOUT_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[2] = PCOUT_expected_prev[2];
	end
	if (
		( PCOUT_expected_prev[3] !== 1'bx ) && ( PCOUT_prev[3] !== PCOUT_expected_prev[3] )
		&& ((PCOUT_expected_prev[3] !== last_PCOUT_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[3] = PCOUT_expected_prev[3];
	end
	if (
		( PCOUT_expected_prev[4] !== 1'bx ) && ( PCOUT_prev[4] !== PCOUT_expected_prev[4] )
		&& ((PCOUT_expected_prev[4] !== last_PCOUT_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[4] = PCOUT_expected_prev[4];
	end
	if (
		( PCOUT_expected_prev[5] !== 1'bx ) && ( PCOUT_prev[5] !== PCOUT_expected_prev[5] )
		&& ((PCOUT_expected_prev[5] !== last_PCOUT_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[5] = PCOUT_expected_prev[5];
	end
	if (
		( PCOUT_expected_prev[6] !== 1'bx ) && ( PCOUT_prev[6] !== PCOUT_expected_prev[6] )
		&& ((PCOUT_expected_prev[6] !== last_PCOUT_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[6] = PCOUT_expected_prev[6];
	end
	if (
		( PCOUT_expected_prev[7] !== 1'bx ) && ( PCOUT_prev[7] !== PCOUT_expected_prev[7] )
		&& ((PCOUT_expected_prev[7] !== last_PCOUT_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOUT_expected_prev);
		$display ("     Real value = %b", PCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCOUT_exp[7] = PCOUT_expected_prev[7];
	end
	if (
		( R0OUT_expected_prev[0] !== 1'bx ) && ( R0OUT_prev[0] !== R0OUT_expected_prev[0] )
		&& ((R0OUT_expected_prev[0] !== last_R0OUT_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[0] = R0OUT_expected_prev[0];
	end
	if (
		( R0OUT_expected_prev[1] !== 1'bx ) && ( R0OUT_prev[1] !== R0OUT_expected_prev[1] )
		&& ((R0OUT_expected_prev[1] !== last_R0OUT_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[1] = R0OUT_expected_prev[1];
	end
	if (
		( R0OUT_expected_prev[2] !== 1'bx ) && ( R0OUT_prev[2] !== R0OUT_expected_prev[2] )
		&& ((R0OUT_expected_prev[2] !== last_R0OUT_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[2] = R0OUT_expected_prev[2];
	end
	if (
		( R0OUT_expected_prev[3] !== 1'bx ) && ( R0OUT_prev[3] !== R0OUT_expected_prev[3] )
		&& ((R0OUT_expected_prev[3] !== last_R0OUT_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[3] = R0OUT_expected_prev[3];
	end
	if (
		( R0OUT_expected_prev[4] !== 1'bx ) && ( R0OUT_prev[4] !== R0OUT_expected_prev[4] )
		&& ((R0OUT_expected_prev[4] !== last_R0OUT_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[4] = R0OUT_expected_prev[4];
	end
	if (
		( R0OUT_expected_prev[5] !== 1'bx ) && ( R0OUT_prev[5] !== R0OUT_expected_prev[5] )
		&& ((R0OUT_expected_prev[5] !== last_R0OUT_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[5] = R0OUT_expected_prev[5];
	end
	if (
		( R0OUT_expected_prev[6] !== 1'bx ) && ( R0OUT_prev[6] !== R0OUT_expected_prev[6] )
		&& ((R0OUT_expected_prev[6] !== last_R0OUT_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[6] = R0OUT_expected_prev[6];
	end
	if (
		( R0OUT_expected_prev[7] !== 1'bx ) && ( R0OUT_prev[7] !== R0OUT_expected_prev[7] )
		&& ((R0OUT_expected_prev[7] !== last_R0OUT_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0OUT_expected_prev);
		$display ("     Real value = %b", R0OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0OUT_exp[7] = R0OUT_expected_prev[7];
	end
	if (
		( R1OUT_expected_prev[0] !== 1'bx ) && ( R1OUT_prev[0] !== R1OUT_expected_prev[0] )
		&& ((R1OUT_expected_prev[0] !== last_R1OUT_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[0] = R1OUT_expected_prev[0];
	end
	if (
		( R1OUT_expected_prev[1] !== 1'bx ) && ( R1OUT_prev[1] !== R1OUT_expected_prev[1] )
		&& ((R1OUT_expected_prev[1] !== last_R1OUT_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[1] = R1OUT_expected_prev[1];
	end
	if (
		( R1OUT_expected_prev[2] !== 1'bx ) && ( R1OUT_prev[2] !== R1OUT_expected_prev[2] )
		&& ((R1OUT_expected_prev[2] !== last_R1OUT_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[2] = R1OUT_expected_prev[2];
	end
	if (
		( R1OUT_expected_prev[3] !== 1'bx ) && ( R1OUT_prev[3] !== R1OUT_expected_prev[3] )
		&& ((R1OUT_expected_prev[3] !== last_R1OUT_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[3] = R1OUT_expected_prev[3];
	end
	if (
		( R1OUT_expected_prev[4] !== 1'bx ) && ( R1OUT_prev[4] !== R1OUT_expected_prev[4] )
		&& ((R1OUT_expected_prev[4] !== last_R1OUT_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[4] = R1OUT_expected_prev[4];
	end
	if (
		( R1OUT_expected_prev[5] !== 1'bx ) && ( R1OUT_prev[5] !== R1OUT_expected_prev[5] )
		&& ((R1OUT_expected_prev[5] !== last_R1OUT_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[5] = R1OUT_expected_prev[5];
	end
	if (
		( R1OUT_expected_prev[6] !== 1'bx ) && ( R1OUT_prev[6] !== R1OUT_expected_prev[6] )
		&& ((R1OUT_expected_prev[6] !== last_R1OUT_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[6] = R1OUT_expected_prev[6];
	end
	if (
		( R1OUT_expected_prev[7] !== 1'bx ) && ( R1OUT_prev[7] !== R1OUT_expected_prev[7] )
		&& ((R1OUT_expected_prev[7] !== last_R1OUT_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1OUT_expected_prev);
		$display ("     Real value = %b", R1OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1OUT_exp[7] = R1OUT_expected_prev[7];
	end
	if (
		( R2OUT_expected_prev[0] !== 1'bx ) && ( R2OUT_prev[0] !== R2OUT_expected_prev[0] )
		&& ((R2OUT_expected_prev[0] !== last_R2OUT_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[0] = R2OUT_expected_prev[0];
	end
	if (
		( R2OUT_expected_prev[1] !== 1'bx ) && ( R2OUT_prev[1] !== R2OUT_expected_prev[1] )
		&& ((R2OUT_expected_prev[1] !== last_R2OUT_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[1] = R2OUT_expected_prev[1];
	end
	if (
		( R2OUT_expected_prev[2] !== 1'bx ) && ( R2OUT_prev[2] !== R2OUT_expected_prev[2] )
		&& ((R2OUT_expected_prev[2] !== last_R2OUT_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[2] = R2OUT_expected_prev[2];
	end
	if (
		( R2OUT_expected_prev[3] !== 1'bx ) && ( R2OUT_prev[3] !== R2OUT_expected_prev[3] )
		&& ((R2OUT_expected_prev[3] !== last_R2OUT_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[3] = R2OUT_expected_prev[3];
	end
	if (
		( R2OUT_expected_prev[4] !== 1'bx ) && ( R2OUT_prev[4] !== R2OUT_expected_prev[4] )
		&& ((R2OUT_expected_prev[4] !== last_R2OUT_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[4] = R2OUT_expected_prev[4];
	end
	if (
		( R2OUT_expected_prev[5] !== 1'bx ) && ( R2OUT_prev[5] !== R2OUT_expected_prev[5] )
		&& ((R2OUT_expected_prev[5] !== last_R2OUT_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[5] = R2OUT_expected_prev[5];
	end
	if (
		( R2OUT_expected_prev[6] !== 1'bx ) && ( R2OUT_prev[6] !== R2OUT_expected_prev[6] )
		&& ((R2OUT_expected_prev[6] !== last_R2OUT_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[6] = R2OUT_expected_prev[6];
	end
	if (
		( R2OUT_expected_prev[7] !== 1'bx ) && ( R2OUT_prev[7] !== R2OUT_expected_prev[7] )
		&& ((R2OUT_expected_prev[7] !== last_R2OUT_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2OUT_expected_prev);
		$display ("     Real value = %b", R2OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2OUT_exp[7] = R2OUT_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab44_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLKS;
reg RESET;
reg RST;
// wires                                               
wire [7:0] Ain;
wire [7:0] Bin;
wire CPIR;
wire CPMAR;
wire CPPC;
wire [7:0] DBUS;
wire [7:0] IROUT;
wire MA;
wire [7:0] MM;
wire PB;
wire [7:0] PCOUT;
wire [7:0] R0OUT;
wire [7:0] R1OUT;
wire [7:0] R2OUT;
wire RA;
wire RB;

wire sampler;                             

// assign statements (if any)                          
lab44 i1 (
// port map - connection between master ports and signals/registers   
	.Ain(Ain),
	.Bin(Bin),
	.CLK(CLK),
	.CLKS(CLKS),
	.CPIR(CPIR),
	.CPMAR(CPMAR),
	.CPPC(CPPC),
	.DBUS(DBUS),
	.IROUT(IROUT),
	.MA(MA),
	.MM(MM),
	.PB(PB),
	.PCOUT(PCOUT),
	.R0OUT(R0OUT),
	.R1OUT(R1OUT),
	.R2OUT(R2OUT),
	.RA(RA),
	.RB(RB),
	.RESET(RESET),
	.RST(RST)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
end 

// CLKS
always
begin
	CLKS = 1'b0;
	CLKS = #5000 1'b1;
	#5000;
end 

// RESET
initial
begin
	RESET = 1'b1;
end 

// RST
initial
begin
	RST = 1'b1;
end 

lab44_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLKS(CLKS),
	.RESET(RESET),
	.RST(RST),
	.sampler_tx(sampler)
);

lab44_vlg_check_tst tb_out(
	.Ain(Ain),
	.Bin(Bin),
	.CPIR(CPIR),
	.CPMAR(CPMAR),
	.CPPC(CPPC),
	.DBUS(DBUS),
	.IROUT(IROUT),
	.MA(MA),
	.MM(MM),
	.PB(PB),
	.PCOUT(PCOUT),
	.R0OUT(R0OUT),
	.R1OUT(R1OUT),
	.R2OUT(R2OUT),
	.RA(RA),
	.RB(RB),
	.sampler_rx(sampler)
);
endmodule

